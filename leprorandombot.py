# -*- coding: utf-8 -*-
import os
import sys
import telebot
import shelve
import random
from flask import Flask, request

token = os.environ['TOKEN']
bot = telebot.TeleBot(token)

server = Flask(__name__)


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    result = "–ü—Ä–∏–≤–µ—Ç! –Ø –õ–µ–ø—Ä–æ—Ä–∞–Ω–¥–æ–º–±–æ—Ç!\r\n–Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:"
    result += "\r\n/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    result += "\r\n/setlepers <—Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ (–≤–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)"
    result += "\r\n/getlepers - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    result += "\r\n/randomize <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤> - –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    result += "\r\n/help - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    bot.send_message(message.chat.id, result)


@bot.message_handler(commands=['randomize'])
def handle_randomize(message):
    msg = message.text[len('/randomize'):]
    if msg.startswith('@'):
        if msg.startswith('@LeproRandomBot ') or msg == '@LeproRandomBot':
            msg = msg[len('@LeproRandomBot '):]
        else:
            msg = '0'
    total = set(get_lepers(message.chat.id))
    if len(total) == 0:
        bot.send_message(message.chat.id, '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –Ø –Ω–µ —Å–º–æ–≥—É –Ω–∏—á–µ–≥–æ –Ω–∞—Ä–∞–Ω–¥–æ–º–∏—Ç—å.')
        return
    if not msg:
        with shelve.open('lepers.db') as storage:
            try:
                number = int(storage['number'])
            except KeyError:
                number = len(total)
    else:
        try:
            number = int(msg)
        except:
            bot.send_message(message.chat.id, '–ß—Ç–æ —ç—Ç–æ –∑–∞ —á–∏—Å–ª–æ? –ù–µ –ø–æ–π–º—É.')
            return
        if not number:
            bot.send_message(message.chat.id, '–ù—É –Ω–µ—Ç, —Ç–∞–∫ –Ω–µ–ª—å–∑—è.')
            return
        with shelve.open('lepers.db') as storage:
            storage['number'] = number
    if len(total) < number:
        bot.send_message(message.chat.id, '–ü–æ–∑–≤–æ–ª—å—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å %s –∏–∑ %s.' % (number, len(total)))
        return
    players = random.sample(total, number)
    losers = total.difference(players)
    players_enumerated = ['%s. %s' % (i + 1, player) for i, player in enumerate(players)]
    result = '*–†–∞–Ω–¥–æ–º –≤—ã–±—Ä–∞–ª —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤:*\r\n%s' % '\r\n'.join(players_enumerated)
    result += '\r\n*–ü–æ–∑–¥—Ä–∞–≤–∏–º —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤!*üåü'
    if len(losers) > 0:
        players_enumerated = ['%s. %s' % (i + 1, player) for i, player in enumerate(losers)]
        result += '\r\n\r\n*–ñ–¥—É—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–Ω—Å–∞:*\r\n%s' % '\r\n'.join(players_enumerated)
    bot.send_message(message.chat.id, result, parse_mode='Markdown')


@bot.message_handler(commands=['setlepers'])
def handle_set_lepers(message):
    msg = message.text[len('/setlepers '):]
    if not msg:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.')
        return
    lepers = msg.split(' ')
    if len(lepers) > 100:
        bot.send_message(message.chat.id, '–í–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –î–∞–π—Ç–µ –º–Ω–µ –ø–æ–º–µ–Ω—å—à–µ –ª—é–¥–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
        return
    if max([len(leper) for leper in lepers]) > 32:
        bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –∫–æ–≥–æ-—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...')
        return
    set_lepers(message.chat.id, lepers)
    bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.')


@bot.message_handler(commands=['getlepers'])
def handle_get_lepers(message):
    lepers = get_lepers(message.chat.id)
    if len(lepers) == 0:
        result = '–í –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'
    else:
        players_enumerated = ['%s. %s' % (i + 1, player) for i, player in enumerate(lepers)]
        result = '*–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:*\r\n%s' % '\r\n'.join(players_enumerated)
    bot.send_message(message.chat.id, result, parse_mode='Markdown')


def set_lepers(chat_id, lepers):
    with shelve.open('lepers.db') as storage:
        storage[str(chat_id)] = set(lepers)


def get_lepers(chat_id):
    with shelve.open('lepers.db') as storage:
        try:
            lepers = storage[str(chat_id)]
            return lepers
        except KeyError:
            return []

@server.route('/%s' % token, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200

@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=os.environ['URL'] + token)
    return "!", 200

port = int(os.environ.get('PORT', 5000))
server.run(host="0.0.0.0", port=port)